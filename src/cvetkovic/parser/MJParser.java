
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jul 04 14:32:27 CEST 2020
//----------------------------------------------------

package cvetkovic.parser;

import java.io.*;
import java_cup.runtime.*;
import cvetkovic.parser.ast.*;
import cvetkovic.lexer.*;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.10k generated parser.
  * @version Sat Jul 04 14:32:27 CEST 2020
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\003\010\000\002\004" +
    "\003\000\002\055\004\000\002\055\002\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\057\004\000\002\057\002\000\002\042\007\000\002" +
    "\060\005\000\002\060\002\000\002\061\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\031\005" +
    "\000\002\031\004\000\002\062\005\000\002\062\003\000" +
    "\002\063\004\000\002\063\003\000\002\064\002\000\002" +
    "\064\004\000\002\005\011\000\002\005\011\000\002\005" +
    "\010\000\002\006\003\000\002\065\004\000\002\065\002" +
    "\000\002\066\004\000\002\066\002\000\002\067\005\000" +
    "\002\067\002\000\002\070\004\000\002\070\002\000\002" +
    "\015\012\000\002\016\003\000\002\071\004\000\002\071" +
    "\002\000\002\072\004\000\002\072\002\000\002\073\005" +
    "\000\002\073\002\000\002\074\004\000\002\074\002\000" +
    "\002\075\003\000\002\075\003\000\002\010\007\000\002" +
    "\012\007\000\002\011\003\000\002\027\003\000\002\027" +
    "\003\000\002\076\003\000\002\076\002\000\002\077\004" +
    "\000\002\077\002\000\002\100\004\000\002\100\002\000" +
    "\002\020\011\000\002\020\004\000\002\017\003\000\002" +
    "\030\003\000\002\030\003\000\002\101\003\000\002\101" +
    "\002\000\002\040\004\000\002\013\005\000\002\013\003" +
    "\000\002\102\005\000\002\102\002\000\002\103\004\000" +
    "\002\103\002\000\002\022\003\000\002\041\004\000\002" +
    "\041\005\000\002\041\014\000\002\041\004\000\002\041" +
    "\004\000\002\041\005\000\002\041\007\000\002\041\010" +
    "\000\002\041\005\000\002\041\003\000\002\044\006\000" +
    "\002\045\003\000\002\104\004\000\002\104\002\000\002" +
    "\032\003\000\002\033\003\000\002\105\003\000\002\105" +
    "\002\000\002\105\003\000\002\035\003\000\002\106\004" +
    "\000\002\106\002\000\002\106\003\000\002\034\002\000" +
    "\002\036\003\000\002\107\003\000\002\107\002\000\002" +
    "\107\003\000\002\037\002\000\002\110\004\000\002\110" +
    "\002\000\002\111\004\000\002\111\002\000\002\043\006" +
    "\000\002\043\006\000\002\043\004\000\002\043\004\000" +
    "\002\123\002\000\002\121\002\000\002\122\002\000\002" +
    "\112\007\000\002\112\002\000\002\125\002\000\002\126" +
    "\002\000\002\014\004\000\002\014\007\000\002\124\002" +
    "\000\002\047\004\000\002\113\005\000\002\113\002\000" +
    "\002\046\003\000\002\050\004\000\002\114\005\000\002" +
    "\114\002\000\002\026\004\000\002\026\007\000\002\023" +
    "\004\000\002\023\005\000\002\115\003\000\002\115\002" +
    "\000\002\024\003\000\002\024\005\000\002\025\004\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\005\000\002\025\005\000\002\116\005\000\002\116" +
    "\002\000\002\117\007\000\002\117\002\000\002\120\006" +
    "\000\002\120\002\000\002\007\003\000\002\007\007\000" +
    "\002\007\005\000\002\051\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\053\003\000\002\053\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\004\004\005\001\002\000\004\002\u010d\001" +
    "\002\000\004\055\007\001\002\000\016\003\ufffd\006\ufffd" +
    "\007\ufffd\011\ufffd\052\ufffd\055\ufffd\001\002\000\016\003" +
    "\uffff\006\uffff\007\uffff\011\uffff\052\uffff\055\uffff\001\002" +
    "\000\016\003\020\006\023\007\013\011\024\052\014\055" +
    "\012\001\002\000\006\003\u0104\055\u0106\001\002\000\054" +
    "\003\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\043\uffb6\044\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\055\uffb6\001\002\000\004\006\345\001\002\000\010" +
    "\017\ufff7\053\ufff7\055\ufff7\001\002\000\016\003\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\052\ufffb\055\ufffb\001\002\000\016" +
    "\003\ufff9\006\ufff9\007\ufff9\011\ufff9\052\ufff9\055\ufff9\001" +
    "\002\000\016\003\ufffe\006\ufffe\007\ufffe\011\ufffe\052\ufffe" +
    "\055\ufffe\001\002\000\010\021\043\043\327\052\uffe2\001" +
    "\002\000\016\003\ufffa\006\ufffa\007\ufffa\011\ufffa\052\ufffa" +
    "\055\ufffa\001\002\000\016\003\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\052\ufffc\055\ufffc\001\002\000\004\055\042\001\002" +
    "\000\004\055\012\001\002\000\004\055\026\001\002\000" +
    "\004\040\034\001\002\000\006\043\ufff4\044\ufff4\001\002" +
    "\000\006\043\031\044\032\001\002\000\016\003\ufff6\006" +
    "\ufff6\007\ufff6\011\ufff6\052\ufff6\055\ufff6\001\002\000\004" +
    "\055\026\001\002\000\006\043\ufff5\044\ufff5\001\002\000" +
    "\010\054\035\056\040\057\037\001\002\000\006\043\ufff2" +
    "\044\ufff2\001\002\000\006\043\ufff3\044\ufff3\001\002\000" +
    "\006\043\ufff0\044\ufff0\001\002\000\006\043\ufff1\044\ufff1" +
    "\001\002\000\010\003\044\021\043\052\uffe2\001\002\000" +
    "\010\003\uffe4\021\uffe4\052\uffe4\001\002\000\004\055\012" +
    "\001\002\000\004\052\330\001\002\000\004\052\046\001" +
    "\002\000\012\003\uffe0\052\uffe0\053\uffe0\055\uffe0\001\002" +
    "\000\012\003\050\052\052\053\uffde\055\012\001\002\000" +
    "\004\043\327\001\002\000\012\003\uffe1\052\uffe1\053\uffe1" +
    "\055\uffe1\001\002\000\010\017\uffdc\053\uffdc\055\uffdc\001" +
    "\002\000\004\053\054\001\002\000\016\003\uffe7\006\uffe7" +
    "\007\uffe7\011\uffe7\052\uffe7\055\uffe7\001\002\000\010\017" +
    "\063\053\060\055\012\001\002\000\004\055\307\001\002" +
    "\000\004\055\uffcc\001\002\000\004\053\uffdf\001\002\000" +
    "\010\003\uffc7\052\uffc7\055\uffc7\001\002\000\010\017\uffdd" +
    "\053\uffdd\055\uffdd\001\002\000\004\055\uffcb\001\002\000" +
    "\010\003\050\052\066\055\012\001\002\000\010\003\uffc8" +
    "\052\uffc8\055\uffc8\001\002\000\030\003\uffc5\005\uffc5\012" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\022\uffc5\052\uffc5" +
    "\053\uffc5\055\uffc5\001\002\000\030\003\103\005\110\012" +
    "\077\014\104\015\070\016\105\020\073\022\106\052\072" +
    "\053\107\055\071\001\002\000\004\046\303\001\002\000" +
    "\060\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\uff6b\050\uff6b\051\uff6b\001\002\000\030\003" +
    "\uff95\005\uff95\012\uff95\014\uff95\015\uff95\016\uff95\020\uff95" +
    "\022\uff95\052\uff95\053\uff95\055\uff95\001\002\000\004\046" +
    "\uffa6\001\002\000\016\040\266\041\265\042\263\045\147" +
    "\046\264\050\144\001\002\000\026\003\103\005\110\012" +
    "\077\014\104\015\070\016\105\020\073\022\106\052\072" +
    "\055\071\001\002\000\004\046\252\001\002\000\004\046" +
    "\uffaa\001\002\000\030\003\uffc6\005\uffc6\012\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\020\uffc6\022\uffc6\052\uffc6\053\uffc6\055" +
    "\uffc6\001\002\000\004\043\251\001\002\000\004\046\203" +
    "\001\002\000\032\003\uffac\005\uffac\010\uffac\012\uffac\014" +
    "\uffac\015\uffac\016\uffac\020\uffac\022\uffac\052\uffac\053\uffac" +
    "\055\uffac\001\002\000\004\046\176\001\002\000\022\013" +
    "\uff90\024\uff90\043\uff97\046\uff90\054\uff90\055\uff90\056\uff90" +
    "\057\uff90\001\002\000\004\043\112\001\002\000\014\003" +
    "\uffcf\007\uffcf\017\uffcf\053\uffcf\055\uffcf\001\002\000\004" +
    "\043\111\001\002\000\032\003\uffb2\005\uffb2\010\uffb2\012" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\022\uffb2\052\uffb2" +
    "\053\uffb2\055\uffb2\001\002\000\032\003\uffb1\005\uffb1\010" +
    "\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1\022\uffb1" +
    "\052\uffb1\053\uffb1\055\uffb1\001\002\000\020\013\uff7a\024" +
    "\116\046\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\001\002" +
    "\000\004\043\115\001\002\000\032\003\uffb0\005\uffb0\010" +
    "\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\022\uffb0" +
    "\052\uffb0\053\uffb0\055\uffb0\001\002\000\016\013\uff7b\046" +
    "\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\001\002\000\010" +
    "\023\141\024\137\043\uff98\001\002\000\016\013\121\046" +
    "\123\054\125\055\071\056\130\057\124\001\002\000\004" +
    "\055\012\001\002\000\052\023\uff70\024\uff70\025\uff70\026" +
    "\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70" +
    "\035\uff70\036\uff70\037\uff70\043\uff70\044\uff70\045\147\046" +
    "\146\047\uff70\050\144\051\uff70\001\002\000\020\013\uff7a" +
    "\024\116\046\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\001" +
    "\002\000\044\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74" +
    "\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036" +
    "\uff74\037\uff74\043\uff74\044\uff74\047\uff74\051\uff74\001\002" +
    "\000\044\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030" +
    "\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76" +
    "\037\uff76\043\uff76\044\uff76\047\uff76\051\uff76\001\002\000" +
    "\044\023\uff7d\024\uff7d\025\132\026\133\027\131\030\uff7d" +
    "\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\043\uff7d\044\uff7d\047\uff7d\051\uff7d\001\002\000\044" +
    "\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031" +
    "\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79" +
    "\043\uff79\044\uff79\047\uff79\051\uff79\001\002\000\044\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\043" +
    "\uff75\044\uff75\047\uff75\051\uff75\001\002\000\016\013\uff5d" +
    "\046\uff5d\054\uff5d\055\uff5d\056\uff5d\057\uff5d\001\002\000" +
    "\016\013\uff5f\046\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f" +
    "\001\002\000\016\013\uff5e\046\uff5e\054\uff5e\055\uff5e\056" +
    "\uff5e\057\uff5e\001\002\000\016\013\121\046\123\054\125" +
    "\055\071\056\130\057\124\001\002\000\044\023\uff78\024" +
    "\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\043\uff78\044" +
    "\uff78\047\uff78\051\uff78\001\002\000\010\023\141\024\137" +
    "\047\140\001\002\000\016\013\uff60\046\uff60\054\uff60\055" +
    "\uff60\056\uff60\057\uff60\001\002\000\044\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\043\uff72\044\uff72" +
    "\047\uff72\051\uff72\001\002\000\016\013\uff61\046\uff61\054" +
    "\uff61\055\uff61\056\uff61\057\uff61\001\002\000\016\013\121" +
    "\046\123\054\125\055\071\056\130\057\124\001\002\000" +
    "\044\023\uff7c\024\uff7c\025\132\026\133\027\131\030\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\043\uff7c\044\uff7c\047\uff7c\051\uff7c\001\002\000\020" +
    "\013\uff90\024\uff90\046\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\001\002\000\044\023\uff77\024\uff77\025\uff77\026\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035" +
    "\uff77\036\uff77\037\uff77\043\uff77\044\uff77\047\uff77\051\uff77" +
    "\001\002\000\022\013\uff8f\024\uff8f\046\uff8f\047\uff6e\054" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\001\002\000\004\055\150" +
    "\001\002\000\060\023\uff69\024\uff69\025\uff69\026\uff69\027" +
    "\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69" +
    "\036\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044" +
    "\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\001\002" +
    "\000\004\047\164\001\002\000\020\013\uff8b\024\uff8b\046" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\001\002\000\020" +
    "\013\uff90\024\uff90\046\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\001\002\000\004\047\uff8a\001\002\000\020\013\uff7a" +
    "\024\116\046\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\001" +
    "\002\000\012\023\141\024\137\044\uff87\047\uff89\001\002" +
    "\000\004\044\160\001\002\000\020\013\uff90\024\uff90\046" +
    "\uff90\054\uff90\055\uff90\056\uff90\057\uff90\001\002\000\004" +
    "\047\uff88\001\002\000\004\047\uff8e\001\002\000\004\047" +
    "\uff6f\001\002\000\044\023\uff71\024\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035" +
    "\uff71\036\uff71\037\uff71\043\uff71\044\uff71\047\uff71\051\uff71" +
    "\001\002\000\020\013\uff7a\024\116\046\uff7a\054\uff7a\055" +
    "\uff7a\056\uff7a\057\uff7a\001\002\000\010\023\141\024\137" +
    "\051\167\001\002\000\060\023\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043" +
    "\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a" +
    "\001\002\000\046\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\043\uff6c\044\uff6c\047\uff6c\050\171\051" +
    "\uff6c\001\002\000\020\013\uff90\024\uff90\046\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\001\002\000\044\023\uff73\024" +
    "\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73" +
    "\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\043\uff73\044" +
    "\uff73\047\uff73\051\uff73\001\002\000\020\013\uff7a\024\116" +
    "\046\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\001\002\000" +
    "\010\023\141\024\137\051\175\001\002\000\044\023\uff6d" +
    "\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032" +
    "\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\043\uff6d" +
    "\044\uff6d\047\uff6d\051\uff6d\001\002\000\020\013\uff90\024" +
    "\uff90\046\uff90\054\uff90\055\uff90\056\uff90\057\uff90\001\002" +
    "\000\020\013\uff7a\024\116\046\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\001\002\000\010\023\141\024\137\047\201" +
    "\001\002\000\004\043\202\001\002\000\032\003\uffae\005" +
    "\uffae\010\uffae\012\uffae\014\uffae\015\uffae\016\uffae\020\uffae" +
    "\022\uffae\052\uffae\053\uffae\055\uffae\001\002\000\010\003" +
    "\204\043\uffa4\055\071\001\002\000\004\043\uffa3\001\002" +
    "\000\004\043\uffa5\001\002\000\004\043\207\001\002\000" +
    "\024\003\uffa2\013\uffa2\024\uffa2\043\uffa2\046\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\001\002\000\024\003\211\013" +
    "\uff9e\024\uff9e\043\uffa0\046\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\001\002\000\004\043\uff9f\001\002\000\004\043" +
    "\241\001\002\000\020\013\uff90\024\uff90\046\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\001\002\000\010\037\uff84\043" +
    "\uff84\047\uff84\001\002\000\020\013\uff7a\024\116\046\uff7a" +
    "\054\uff7a\055\uff7a\056\uff7a\057\uff7a\001\002\000\004\043" +
    "\uffa1\001\002\000\012\036\uff80\037\uff80\043\uff80\047\uff80" +
    "\001\002\000\012\036\221\037\uff82\043\uff82\047\uff82\001" +
    "\002\000\020\013\uff90\024\uff90\046\uff90\054\uff90\055\uff90" +
    "\056\uff90\057\uff90\001\002\000\012\036\uff81\037\uff81\043" +
    "\uff81\047\uff81\001\002\000\032\023\141\024\137\030\226" +
    "\031\232\032\225\033\230\034\231\035\224\036\uff7f\037" +
    "\uff7f\043\uff7f\047\uff7f\001\002\000\020\013\uff62\024\uff62" +
    "\046\uff62\054\uff62\055\uff62\056\uff62\057\uff62\001\002\000" +
    "\020\013\uff65\024\uff65\046\uff65\054\uff65\055\uff65\056\uff65" +
    "\057\uff65\001\002\000\020\013\uff67\024\uff67\046\uff67\054" +
    "\uff67\055\uff67\056\uff67\057\uff67\001\002\000\020\013\uff90" +
    "\024\uff90\046\uff90\054\uff90\055\uff90\056\uff90\057\uff90\001" +
    "\002\000\020\013\uff64\024\uff64\046\uff64\054\uff64\055\uff64" +
    "\056\uff64\057\uff64\001\002\000\020\013\uff63\024\uff63\046" +
    "\uff63\054\uff63\055\uff63\056\uff63\057\uff63\001\002\000\020" +
    "\013\uff66\024\uff66\046\uff66\054\uff66\055\uff66\056\uff66\057" +
    "\uff66\001\002\000\020\013\uff7a\024\116\046\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\001\002\000\016\023\141\024" +
    "\137\036\uff7e\037\uff7e\043\uff7e\047\uff7e\001\002\000\010" +
    "\037\236\043\uff86\047\uff86\001\002\000\020\013\uff83\024" +
    "\uff83\046\uff83\054\uff83\055\uff83\056\uff83\057\uff83\001\002" +
    "\000\020\013\uff90\024\uff90\046\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\001\002\000\010\037\uff85\043\uff85\047\uff85" +
    "\001\002\000\010\003\uff9d\047\uff9d\055\uff9d\001\002\000" +
    "\010\003\244\047\uff9b\055\071\001\002\000\004\047\246" +
    "\001\002\000\004\047\uff9a\001\002\000\004\047\uff9c\001" +
    "\002\000\026\003\103\005\110\012\077\014\104\015\070" +
    "\016\105\020\073\022\106\052\072\055\071\001\002\000" +
    "\032\003\uff99\005\uff99\010\uff99\012\uff99\014\uff99\015\uff99" +
    "\016\uff99\020\uff99\022\uff99\052\uff99\053\uff99\055\uff99\001" +
    "\002\000\032\003\uffb3\005\uffb3\010\uffb3\012\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\020\uffb3\022\uffb3\052\uffb3\053\uffb3\055" +
    "\uffb3\001\002\000\032\003\uffb5\005\uffb5\010\uffb5\012\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\020\uffb5\022\uffb5\052\uffb5\053" +
    "\uffb5\055\uffb5\001\002\000\020\013\uff90\024\uff90\046\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\001\002\000\004\047" +
    "\254\001\002\000\026\003\uffab\005\uffab\012\uffab\014\uffab" +
    "\015\uffab\016\uffab\020\uffab\022\uffab\052\uffab\055\uffab\001" +
    "\002\000\032\003\uffa8\005\uffa8\010\257\012\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\020\uffa8\022\uffa8\052\uffa8\053\uffa8\055" +
    "\uffa8\001\002\000\026\003\103\005\110\012\077\014\104" +
    "\015\070\016\105\020\073\022\106\052\072\055\071\001" +
    "\002\000\026\003\uffa7\005\uffa7\012\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\020\uffa7\022\uffa7\052\uffa7\055\uffa7\001\002\000" +
    "\032\003\uffb4\005\uffb4\010\uffb4\012\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\020\uffb4\022\uffb4\052\uffb4\053\uffb4\055\uffb4\001" +
    "\002\000\032\003\uffa9\005\uffa9\010\uffa9\012\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\020\uffa9\022\uffa9\052\uffa9\053\uffa9\055" +
    "\uffa9\001\002\000\020\013\uff90\024\uff90\046\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\001\002\000\006\043\uff91\047" +
    "\uff91\001\002\000\022\013\uff8f\024\uff8f\046\uff8f\047\uff8c" +
    "\054\uff8f\055\uff8f\056\uff8f\057\uff8f\001\002\000\006\043" +
    "\uff92\047\uff92\001\002\000\020\013\uff68\024\uff68\046\uff68" +
    "\054\uff68\055\uff68\056\uff68\057\uff68\001\002\000\004\047" +
    "\275\001\002\000\020\013\uff8b\024\uff8b\046\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\001\002\000\020\013\uff90\024" +
    "\uff90\046\uff90\054\uff90\055\uff90\056\uff90\057\uff90\001\002" +
    "\000\004\047\uff8a\001\002\000\004\047\uff8e\001\002\000" +
    "\004\047\uff8d\001\002\000\006\043\uff93\047\uff93\001\002" +
    "\000\020\013\uff7a\024\116\046\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\001\002\000\012\023\141\024\137\043\uff94" +
    "\047\uff94\001\002\000\030\003\103\005\110\012\077\014" +
    "\104\015\070\016\105\020\073\022\106\052\072\053\302" +
    "\055\071\001\002\000\030\003\uff96\005\uff96\012\uff96\014" +
    "\uff96\015\uff96\016\uff96\020\uff96\022\uff96\052\uff96\053\uff96" +
    "\055\uff96\001\002\000\032\003\uffad\005\uffad\010\uffad\012" +
    "\uffad\014\uffad\015\uffad\016\uffad\020\uffad\022\uffad\052\uffad" +
    "\053\uffad\055\uffad\001\002\000\004\055\071\001\002\000" +
    "\010\045\147\047\305\050\144\001\002\000\004\043\306" +
    "\001\002\000\032\003\uffaf\005\uffaf\010\uffaf\012\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\020\uffaf\022\uffaf\052\uffaf\053\uffaf" +
    "\055\uffaf\001\002\000\004\046\uffcd\001\002\000\004\046" +
    "\311\001\002\000\010\003\314\047\uffc9\055\012\001\002" +
    "\000\004\055\323\001\002\000\006\044\uffb9\047\uffb9\001" +
    "\002\000\006\044\uffbb\047\uffbb\001\002\000\004\047\317" +
    "\001\002\000\004\047\uffca\001\002\000\010\003\uffce\052" +
    "\uffce\055\uffce\001\002\000\006\044\321\047\uffbd\001\002" +
    "\000\006\003\314\055\012\001\002\000\006\044\uffba\047" +
    "\uffba\001\002\000\010\044\uffb7\047\uffb7\050\324\001\002" +
    "\000\004\051\326\001\002\000\006\044\uffbc\047\uffbc\001" +
    "\002\000\006\044\uffb8\047\uffb8\001\002\000\020\003\uffee" +
    "\006\uffee\007\uffee\011\uffee\052\uffee\053\uffee\055\uffee\001" +
    "\002\000\012\003\uffe0\052\uffe0\053\uffe0\055\uffe0\001\002" +
    "\000\012\003\050\052\052\053\uffde\055\012\001\002\000" +
    "\004\053\333\001\002\000\016\003\uffe6\006\uffe6\007\uffe6" +
    "\011\uffe6\052\uffe6\055\uffe6\001\002\000\004\052\uffe3\001" +
    "\002\000\004\052\336\001\002\000\012\003\uffe0\052\uffe0" +
    "\053\uffe0\055\uffe0\001\002\000\012\003\050\052\052\053" +
    "\uffde\055\012\001\002\000\004\053\341\001\002\000\016" +
    "\003\uffe5\006\uffe5\007\uffe5\011\uffe5\052\uffe5\055\uffe5\001" +
    "\002\000\010\017\063\053\343\055\012\001\002\000\004" +
    "\002\000\001\002\000\010\017\ufff8\053\ufff8\055\ufff8\001" +
    "\002\000\004\055\347\001\002\000\006\021\350\052\uffd8" +
    "\001\002\000\006\021\uffda\052\uffda\001\002\000\004\055" +
    "\012\001\002\000\004\052\352\001\002\000\012\003\uffd6" +
    "\052\uffd6\053\uffd6\055\uffd6\001\002\000\012\003\050\052" +
    "\356\053\uffd4\055\012\001\002\000\004\053\u0101\001\002" +
    "\000\012\003\uffd7\052\uffd7\053\uffd7\055\uffd7\001\002\000" +
    "\014\003\uffd2\007\uffd2\017\uffd2\053\uffd2\055\uffd2\001\002" +
    "\000\014\003\363\007\360\017\063\053\364\055\012\001" +
    "\002\000\006\017\371\055\012\001\002\000\014\003\uffd1" +
    "\007\uffd1\017\uffd1\053\uffd1\055\uffd1\001\002\000\014\003" +
    "\uffd0\007\uffd0\017\uffd0\053\uffd0\055\uffd0\001\002\000\004" +
    "\043\366\001\002\000\004\053\uffd5\001\002\000\014\003" +
    "\uffd3\007\uffd3\017\uffd3\053\uffd3\055\uffd3\001\002\000\014" +
    "\003\uffc3\007\uffc3\017\uffc3\053\uffc3\055\uffc3\001\002\000" +
    "\004\055\uffc1\001\002\000\004\055\373\001\002\000\004" +
    "\055\uffc0\001\002\000\004\046\374\001\002\000\004\046" +
    "\uffc2\001\002\000\010\003\314\047\uffbe\055\012\001\002" +
    "\000\004\047\uffbf\001\002\000\004\047\377\001\002\000" +
    "\004\043\u0100\001\002\000\014\003\uffc4\007\uffc4\017\uffc4" +
    "\053\uffc4\055\uffc4\001\002\000\016\003\uffdb\006\uffdb\007" +
    "\uffdb\011\uffdb\052\uffdb\055\uffdb\001\002\000\004\052\uffd9" +
    "\001\002\000\006\043\u010b\044\u010a\001\002\000\006\043" +
    "\uffea\044\uffea\001\002\000\006\043\uffec\044\uffec\001\002" +
    "\000\010\043\uffe9\044\uffe9\050\u0108\001\002\000\006\043" +
    "\uffeb\044\uffeb\001\002\000\004\051\u0109\001\002\000\006" +
    "\043\uffe8\044\uffe8\001\002\000\006\003\u0104\055\u0106\001" +
    "\002\000\020\003\uffef\006\uffef\007\uffef\011\uffef\052\uffef" +
    "\053\uffef\055\uffef\001\002\000\006\043\uffed\044\uffed\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\004\055\007\001\001\000\002" +
    "\001\001\000\016\005\015\015\020\022\010\031\014\042" +
    "\021\056\016\001\001\000\006\062\u0102\063\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\040\001\001\000\004\022\024\001\001" +
    "\000\004\061\026\001\001\000\002\001\001\000\004\060" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\032\001\001\000\002\001\001\000\004\021\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\044\001\001\000\002\001" +
    "\001\000\004\022\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\046\001\001\000\010\022\010\031" +
    "\050\067\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\061\012\060\022\056\027\055\001\001" +
    "\000\004\011\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\010\031\064\001\001\000\002\001" +
    "\001\000\004\100\066\001\001\000\016\007\073\033\101" +
    "\041\077\043\100\044\074\045\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\111\277\001\001\000\002" +
    "\001\001\000\004\051\261\001\001\000\016\007\073\033" +
    "\101\041\254\043\100\044\074\045\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\110\113\123\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\116\115\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\141" +
    "\001\001\000\010\007\121\024\125\025\126\001\001\000" +
    "\004\022\167\001\001\000\004\116\144\001\001\000\006" +
    "\023\135\115\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\121\025\134\001\001\000\002\001\001" +
    "\000\004\053\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\121\024\142\025\126" +
    "\001\001\000\004\054\133\001\001\000\004\123\164\001" +
    "\001\000\002\001\001\000\006\117\150\121\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\152\001\001\000\006\014\153\123\154\001\001" +
    "\000\004\126\161\001\001\000\006\023\155\115\117\001" +
    "\001\000\006\053\141\124\156\001\001\000\002\001\001" +
    "\000\006\014\160\123\154\001\001\000\002\001\001\000" +
    "\004\122\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\165\115\117\001\001\000\004\053\141\001" +
    "\001\000\002\001\001\000\004\120\171\001\001\000\004" +
    "\123\172\001\001\000\002\001\001\000\006\023\173\115" +
    "\117\001\001\000\004\053\141\001\001\000\002\001\001" +
    "\000\004\123\176\001\001\000\006\023\177\115\117\001" +
    "\001\000\004\053\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\073\043\204\105\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\207\001\001" +
    "\000\002\001\001\000\006\034\212\106\211\001\001\000" +
    "\002\001\001\000\004\036\241\001\001\000\012\026\216" +
    "\047\215\050\213\123\214\001\001\000\004\113\234\001" +
    "\001\000\006\023\222\115\117\001\001\000\002\001\001" +
    "\000\004\114\217\001\001\000\002\001\001\000\006\026" +
    "\221\123\214\001\001\000\002\001\001\000\006\052\226" +
    "\053\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\233\115" +
    "\117\001\001\000\004\053\141\001\001\000\004\046\236" +
    "\001\001\000\002\001\001\000\010\026\216\050\237\123" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\073\043\244\107\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\073\033\101" +
    "\041\246\043\100\044\074\045\075\001\001\000\004\037" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\216\047\252\050\213\123\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\255\104\257\001\001" +
    "\000\016\007\073\033\101\041\260\043\100\044\074\045" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\275\001\001\000\002\001\001\000" +
    "\006\112\266\121\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\125\270\001\001\000" +
    "\006\014\271\123\154\001\001\000\004\126\272\001\001" +
    "\000\004\122\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\276\115\117\001\001\000\004\053\141" +
    "\001\001\000\016\007\073\033\101\041\300\043\100\044" +
    "\074\045\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\312\022\311\040\315\076\314\001\001\000" +
    "\002\001\001\000\004\102\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\321\022\311\001\001\000\002" +
    "\001\001\000\004\103\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\330\001\001\000\010\022\010\031\050\067\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\336\001\001\000\010\022" +
    "\010\031\050\067\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\343\012\060\022\056\027\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\345" +
    "\001\001\000\004\071\350\001\001\000\002\001\001\000" +
    "\004\022\u0101\001\001\000\002\001\001\000\004\072\352" +
    "\001\001\000\010\022\010\031\354\073\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\074\356\001\001" +
    "\000\016\010\360\012\060\020\361\022\056\027\055\075" +
    "\364\001\001\000\006\022\366\030\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\312\022\311\040\374" +
    "\101\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errorDetected = false;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
	{
		//System.out.println(s.toString() + " " + s.value.toString());
    }
	return s;

    }



	private boolean errorDetected = false;

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        System.err.println(msg.toString());
    }
    
	// overriding default error_sync_size() which returns 3
	public int error_sync_size()
	{
		return 1;
	}

	public boolean isErrorDetected()
	{
	    return errorDetected;
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Mulop ::= MODULO 
            {
              Mulop RESULT = null;
		 RESULT=new OperatorModulo(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Mulop ::= DIVISION 
            {
              Mulop RESULT = null;
		 RESULT=new OperatorDivision(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Mulop ::= MULTIPLICATION 
            {
              Mulop RESULT = null;
		 RESULT=new OperatorMultiplication(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Addop ::= SUBTRACTION 
            {
              Addop RESULT = null;
		 RESULT=new OperatorSubtraction(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Addop ::= ADDITION 
            {
              Addop RESULT = null;
		 RESULT=new OperatorAddition(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Relop ::= LESS_OR_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new OperatorLessOrEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new OperatorLess(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Relop ::= GREATER_OR_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new OperatorGreaterOrEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new OperatorGreater(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Relop ::= NOT_EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new OperatorNotEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Relop ::= EQUAL 
            {
              Relop RESULT = null;
		 RESULT=new OperatorEqual(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Assignop ::= ASSINGMENT 
            {
              Assignop RESULT = null;
		 RESULT=new Assignop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Designator ::= Designator DOT IDENT 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String designatorName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorNonArrayAccess(D1, designatorName); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Designator ::= Designator LEFT_SQUARE_BRACKET MakeNewExpressionDAG Expr RIGHT_SQUARE_BRACKET 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MakeNewExpressionDAG M2 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int designatorArrayIndexleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorArrayIndexright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr designatorArrayIndex = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorArrayAccess(D1, M2, designatorArrayIndex); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		int designatorNameSingleleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int designatorNameSingleright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String designatorNameSingle = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorRoot(designatorNameSingle); RESULT.setLine(designatorNameSingleleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FactorArrayDecl ::= 
            {
              FactorArrayDecl RESULT = null;
		 RESULT=new NoArrayDeclaration(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(78/*FactorArrayDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FactorArrayDecl ::= LEFT_SQUARE_BRACKET MakeNewExpressionDAG Expr RIGHT_SQUARE_BRACKET 
            {
              FactorArrayDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MakeNewExpressionDAG M1 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ArrayDeclaration(M1, E2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(78/*FactorArrayDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FactorFunctionCallParametersSingle ::= 
            {
              FactorFunctionCallParametersSingle RESULT = null;
		 RESULT=new NoFactorFunctionCallParameterSingle(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*FactorFunctionCallParametersSingle*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FactorFunctionCallParametersSingle ::= DesignatorInvokeMethodName ActParsStart ActPars ActParsEnd DesignatorInvokeMethodNameEnd 
            {
              FactorFunctionCallParametersSingle RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		DesignatorInvokeMethodName D1 = (DesignatorInvokeMethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ActParsStart A2 = (ActParsStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActPars A3 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParsEnd A4 = (ActParsEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorInvokeMethodNameEnd D5 = (DesignatorInvokeMethodNameEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorFunctionCallParameterSingle(D1, A2, A3, A4, D5); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(77/*FactorFunctionCallParametersSingle*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FactorFunctionCallParameters ::= 
            {
              FactorFunctionCallParameters RESULT = null;
		 RESULT=new NoFactorFunctionCallParameter(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(76/*FactorFunctionCallParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FactorFunctionCallParameters ::= LEFT_ROUND_BRACKET FactorFunctionCallParametersSingle RIGHT_ROUND_BRACKET 
            {
              FactorFunctionCallParameters RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FactorFunctionCallParametersSingle F1 = (FactorFunctionCallParametersSingle)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorFunctionCallParameter(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(76/*FactorFunctionCallParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Factor ::= LEFT_ROUND_BRACKET Expr RIGHT_ROUND_BRACKET 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorExpressionInBrackets(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Factor ::= NEW Type FactorArrayDecl 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorArrayDecl F2 = (FactorArrayDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorArrayDeclaration(T1, F2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Factor ::= BOOLEAN 
            {
              Factor RESULT = null;
		int factorBooleanleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorBooleanright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean factorBoolean = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorBoolConst(factorBoolean); RESULT.setLine(factorBooleanleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int factorCharleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorCharright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character factorChar = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorCharConst(factorChar); RESULT.setLine(factorCharleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Factor ::= NUM_CONST 
            {
              Factor RESULT = null;
		int factorNumConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int factorNumConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer factorNumConst = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNumericalConst(factorNumConst); RESULT.setLine(factorNumConstleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Factor ::= Designator FactorFunctionCallParameters 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FactorFunctionCallParameters F2 = (FactorFunctionCallParameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorFunctionCall(D1, F2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M2 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F3 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMultiple(T1, M2, F3); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Term ::= Factor 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermSingle(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ExprNegative ::= 
            {
              ExprNegative RESULT = null;
		 RESULT=new ExpressionPositive(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(75/*ExprNegative*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ExprNegative ::= SUBTRACTION 
            {
              ExprNegative RESULT = null;
		 RESULT=new ExpressionNegative(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(75/*ExprNegative*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BinaryExpression(E1, A2, T3); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr ::= ExprNegative Term 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ExprNegative E1 = (ExprNegative)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term T2 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnaryExpression(E1, T2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CondFact ::= MakeNewExpressionDAG Expr Relop MakeNewExpressionDAG Expr 
            {
              CondFact RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MakeNewExpressionDAG M1 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int ExprLeftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int ExprLeftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr ExprLeft = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Relop R2 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MakeNewExpressionDAG M3 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ExprRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int ExprRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr ExprRight = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactBinary(M1, ExprLeft, R2, M3, ExprRight); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CondFact ::= MakeNewExpressionDAG Expr 
            {
              CondFact RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MakeNewExpressionDAG M1 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactUnary(M1, E2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CondTermRight ::= 
            {
              CondTermRight RESULT = null;
		 RESULT=new NoCondTermRight(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*CondTermRight*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CondTermRight ::= CondTermRight LOGICAL_AND CondFact 
            {
              CondTermRight RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTermRight C1 = (CondTermRight)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermRightt(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(74/*CondTermRight*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CondTerm ::= CondFact CondTermRight 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTermRight C2 = (CondTermRight)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LogicalOr ::= LOGICAL_OR 
            {
              LogicalOr RESULT = null;
		 RESULT=new LogicalOrCondition(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*LogicalOr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ConditionRight ::= 
            {
              ConditionRight RESULT = null;
		 RESULT=new NoConditionRight(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(73/*ConditionRight*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ConditionRight ::= ConditionRight LogicalOr CondTerm 
            {
              ConditionRight RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConditionRight C1 = (ConditionRight)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int L2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int L2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		LogicalOr L2 = (LogicalOr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C3 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionRightt(C1, L2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(73/*ConditionRight*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Condition ::= CondTerm ConditionRight 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConditionRight C2 = (ConditionRight)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Condition(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ConcludeCurrentParameter ::= 
            {
              ConcludeCurrentParameter RESULT = null;
		 RESULT=new ConcludeCurrentParameter(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(82/*ConcludeCurrentParameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActPars ::= MakeNewExpressionDAG Expr ConcludeCurrentParameter COMMA ActPars 
            {
              ActPars RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MakeNewExpressionDAG M1 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConcludeCurrentParameter C3 = (ConcludeCurrentParameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActPars A4 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsMultiple(M1, E2, C3, A4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ActPars ::= MakeNewExpressionDAG Expr 
            {
              ActPars RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MakeNewExpressionDAG M1 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsSingle(M1, E2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActParsEnd ::= 
            {
              ActParsEnd RESULT = null;
		 RESULT=new ActParsEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(84/*ActParsEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ActParsStart ::= 
            {
              ActParsStart RESULT = null;
		 RESULT=new ActParsStart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(83/*ActParsStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DesignatorParams ::= 
            {
              DesignatorParams RESULT = null;
		 RESULT=new NoDesignatorMethodCallParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(72/*DesignatorParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DesignatorParams ::= DesignatorInvokeMethodName ActParsStart ActPars ActParsEnd DesignatorInvokeMethodNameEnd 
            {
              DesignatorParams RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		DesignatorInvokeMethodName D1 = (DesignatorInvokeMethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ActParsStart A2 = (ActParsStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActPars A3 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActParsEnd A4 = (ActParsEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorInvokeMethodNameEnd D5 = (DesignatorInvokeMethodNameEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorMethodCallParameters(D1, A2, A3, A4, D5); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(72/*DesignatorParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DesignatorInvokeMethodNameEnd ::= 
            {
              DesignatorInvokeMethodNameEnd RESULT = null;
		 RESULT=new DesignatorInvokeMethodNameEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(80/*DesignatorInvokeMethodNameEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesignatorInvokeMethodName ::= 
            {
              DesignatorInvokeMethodName RESULT = null;
		 RESULT=new DesignatorInvokeMethodName(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(79/*DesignatorInvokeMethodName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MakeNewExpressionDAG ::= 
            {
              MakeNewExpressionDAG RESULT = null;
		 RESULT=new MakeNewExpressionDAG(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(81/*MakeNewExpressionDAG*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorStatement ::= Designator DECREMENT 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesignatorStatement ::= Designator INCREMENT 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DesignatorStatement ::= Designator LEFT_ROUND_BRACKET DesignatorParams RIGHT_ROUND_BRACKET 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorParams D2 = (DesignatorParams)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DesignatorInvoke(D1, D2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DesignatorStatement ::= Designator Assignop MakeNewExpressionDAG Expr 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Assignop A2 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MakeNewExpressionDAG M3 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E4 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorAssign(D1, A2, M3, E4); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MultipleStatement ::= 
            {
              MultipleStatement RESULT = null;
		 RESULT=new NoMultipleStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*MultipleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MultipleStatement ::= MultipleStatement Statement 
            {
              MultipleStatement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MultipleStatement M1 = (MultipleStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleStatements(M1, S2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(71/*MultipleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ReturnStatement ::= 
            {
              ReturnStatement RESULT = null;
		 RESULT=new BlankReturnStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(70/*ReturnStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ReturnStatement ::= MakeNewExpressionDAG Expr 
            {
              ReturnStatement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MakeNewExpressionDAG M1 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprReturnStatement(M1, E2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(70/*ReturnStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EndOfForStatement ::= 
            {
              EndOfForStatement RESULT = null;
		 RESULT=new EndOfForStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*EndOfForStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ForUpdateVarList ::= error 
            {
              ForUpdateVarList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Recovered from invalid loop condition update code in for statement.", null);  RESULT=new ForUpdateVarListError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*ForUpdateVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ForUpdateVarList ::= 
            {
              ForUpdateVarList RESULT = null;
		 RESULT=new NoForUpdateVarList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*ForUpdateVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ForUpdateVarList ::= DesignatorStatement 
            {
              ForUpdateVarList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleForUpdateVarList(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(69/*ForUpdateVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ForLoopConditionEnd ::= DELIMITER 
            {
              ForLoopConditionEnd RESULT = null;
		 RESULT=new ForLoopConditionEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*ForLoopConditionEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StartForCondition ::= 
            {
              StartForCondition RESULT = null;
		 RESULT=new StartForCondition(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*StartForCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ForLoopCondition ::= error 
            {
              ForLoopCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Recovered from invalid loop condition in for statement.", null);  RESULT=new ForLoopConditionError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*ForLoopCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ForLoopCondition ::= 
            {
              ForLoopCondition RESULT = null;
		 RESULT=new NoForLoopCondition(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*ForLoopCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ForLoopCondition ::= StartForCondition Condition 
            {
              ForLoopCondition RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StartForCondition S1 = (StartForCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Condition C2 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleForLoopCondition(S1, C2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(68/*ForLoopCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ForVarDeclEnd ::= DELIMITER 
            {
              ForVarDeclEnd RESULT = null;
		 RESULT=new ForVarDeclEnd(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*ForVarDeclEnd*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ForVarDecl ::= error 
            {
              ForVarDecl RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Recovered from invalid variable declaration in for statement.", null);  RESULT=new ForVarDeclError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*ForVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ForVarDecl ::= 
            {
              ForVarDecl RESULT = null;
		 RESULT=new NoForVarDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*ForVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ForVarDecl ::= DesignatorStatement 
            {
              ForVarDecl RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleForVarDecl(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(67/*ForVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ForKeyword ::= FOR 
            {
              ForKeyword RESULT = null;
		 RESULT=new ForKeyword(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*ForKeyword*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ElseStatementKeyword ::= ELSE 
            {
              ElseStatementKeyword RESULT = null;
		 RESULT=new ElseStatementKeyword(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*ElseStatementKeyword*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ElseStatement ::= 
            {
              ElseStatement RESULT = null;
		 RESULT=new NoElseStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ElseStatement ::= ElseStatementKeyword Statement 
            {
              ElseStatement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElseStatementKeyword E1 = (ElseStatementKeyword)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ElseStatementt(E1, S2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(66/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IfKeyword ::= IF 
            {
              IfKeyword RESULT = null;
		 RESULT=new IfKeyword(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*IfKeyword*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IfCondition ::= IfKeyword LEFT_ROUND_BRACKET Condition RIGHT_ROUND_BRACKET 
            {
              IfCondition RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		IfKeyword I1 = (IfKeyword)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C2 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new IfCondition(I1, C2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*IfCondition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Statement ::= error 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Recovered from invalid statement error.", null);  RESULT=new ErrorStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Statement ::= LEFT_CURLY_BRACKET MultipleStatement RIGHT_CURLY_BRACKET 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MultipleStatement M1 = (MultipleStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MultipleStatementt(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Statement ::= PRINT LEFT_ROUND_BRACKET MakeNewExpressionDAG Expr RIGHT_ROUND_BRACKET DELIMITER 
            {
              Statement RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MakeNewExpressionDAG M1 = (MakeNewExpressionDAG)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintStatement(M1, E2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Statement ::= READ LEFT_ROUND_BRACKET Designator RIGHT_ROUND_BRACKET DELIMITER 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ReadStatement(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Statement ::= RETURN ReturnStatement DELIMITER 
            {
              Statement RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ReturnStatement R1 = (ReturnStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnStatementt(R1); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Statement ::= CONTINUE DELIMITER 
            {
              Statement RESULT = null;
		int continueStleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int continueStright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object continueSt = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ContinueStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Statement ::= BREAK DELIMITER 
            {
              Statement RESULT = null;
		int breakStleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int breakStright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object breakSt = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new BreakStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Statement ::= ForKeyword LEFT_ROUND_BRACKET ForVarDecl ForVarDeclEnd ForLoopCondition ForLoopConditionEnd ForUpdateVarList RIGHT_ROUND_BRACKET Statement EndOfForStatement 
            {
              Statement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		ForKeyword F1 = (ForKeyword)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		ForVarDecl F2 = (ForVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ForVarDeclEnd F3 = (ForVarDeclEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int F4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int F4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ForLoopCondition F4 = (ForLoopCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int F5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int F5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ForLoopConditionEnd F5 = (ForLoopConditionEnd)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int F6left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int F6right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ForUpdateVarList F6 = (ForUpdateVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S7left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S7right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement S7 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E8left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E8right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		EndOfForStatement E8 = (EndOfForStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ForStatement(F1, F2, F3, F4, F5, F6, S7, E8); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Statement ::= IfCondition Statement ElseStatement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfCondition I1 = (IfCondition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ElseStatement E3 = (ElseStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfStatement(I1, S2, E3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Statement ::= DesignatorStatement DELIMITER 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeIdentleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeIdentright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeIdent = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DataType(typeIdent); RESULT.setLine(typeIdentleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FormParamArray ::= 
            {
              FormParamArray RESULT = null;
		 RESULT=new NoFormParamArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*FormParamArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FormParamArray ::= LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET 
            {
              FormParamArray RESULT = null;
		 RESULT=new FormParamArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(65/*FormParamArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MultipleFormalParameter ::= 
            {
              MultipleFormalParameter RESULT = null;
		 RESULT=new NoMultipleFormalParameter(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*MultipleFormalParameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MultipleFormalParameter ::= MultipleFormalParameter COMMA SingleFormalParameter 
            {
              MultipleFormalParameter RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MultipleFormalParameter M1 = (MultipleFormalParameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleFormalParameter S2 = (SingleFormalParameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleFormalParameterr(M1, S2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(64/*MultipleFormalParameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SingleFormalParameter ::= error 
            {
              SingleFormalParameter RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Recovered from invalid formal parameter declaration error.", null);  RESULT=new SingleFormParameterError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*SingleFormalParameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SingleFormalParameter ::= Type IDENT FormParamArray 
            {
              SingleFormalParameter RESULT = null;
		int formParamTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int formParamTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type formParamType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int formParamNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formParamNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String formParamName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParamArray F1 = (FormParamArray)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleFormParameter(formParamType, formParamName, F1); RESULT.setLine(formParamTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*SingleFormalParameter*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FormPars ::= SingleFormalParameter MultipleFormalParameter 
            {
              FormPars RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		SingleFormalParameter S1 = (SingleFormalParameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MultipleFormalParameter M2 = (MultipleFormalParameter)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormPars(S1, M2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AbstractMethodParameters ::= 
            {
              AbstractMethodParameters RESULT = null;
		 RESULT=new NoAbstractMethodParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*AbstractMethodParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AbstractMethodParameters ::= FormPars 
            {
              AbstractMethodParameters RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractMethodParameterss(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(63/*AbstractMethodParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AbstractMethodReturnType ::= VOID 
            {
              AbstractMethodReturnType RESULT = null;
		int abstractMethodIsVoidleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int abstractMethodIsVoidright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object abstractMethodIsVoid = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractMethodWithoutReturn(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*AbstractMethodReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AbstractMethodReturnType ::= Type 
            {
              AbstractMethodReturnType RESULT = null;
		int abstractMethodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int abstractMethodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type abstractMethodReturnType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractMethodWithReturn(abstractMethodReturnType); RESULT.setLine(abstractMethodReturnTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*AbstractMethodReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AbstractMethodName ::= IDENT 
            {
              AbstractMethodName RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractMethodName(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*AbstractMethodName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AbstractMethodDecl ::= error DELIMITER 
            {
              AbstractMethodDecl RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Recovered from invalid abstract method declaration error.", null);  RESULT=new AbstractMethodDeclarationError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*AbstractMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AbstractMethodDecl ::= ABSTRACT AbstractMethodReturnType AbstractMethodName LEFT_ROUND_BRACKET AbstractMethodParameters RIGHT_ROUND_BRACKET DELIMITER 
            {
              AbstractMethodDecl RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		AbstractMethodReturnType A1 = (AbstractMethodReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		AbstractMethodName A2 = (AbstractMethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int A3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		AbstractMethodParameters A3 = (AbstractMethodParameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new AbstractMethodDeclaration(A1, A2, A3); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*AbstractMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MethodStatements ::= 
            {
              MethodStatements RESULT = null;
		 RESULT=new NoMethodStatements(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*MethodStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MethodStatements ::= MethodStatements Statement 
            {
              MethodStatements RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodStatements M1 = (MethodStatements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodStatementss(M1, S2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(62/*MethodStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MethodVarDeclList ::= 
            {
              MethodVarDeclList RESULT = null;
		 RESULT=new NoMethodVarDeclList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*MethodVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodVarDeclList ::= MethodVarDeclList VarDecl 
            {
              MethodVarDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodVarDeclList M1 = (MethodVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodVarDeclListt(M1, V2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(61/*MethodVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodParameters ::= 
            {
              MethodParameters RESULT = null;
		 RESULT=new NoMethodParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*MethodParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodParameters ::= FormPars 
            {
              MethodParameters RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormPars F1 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodParameterss(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(60/*MethodParameters*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodDeclReturnType ::= VOID 
            {
              MethodDeclReturnType RESULT = null;
		int methodIsVoidleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodIsVoidright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object methodIsVoid = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodWithoutReturn(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*MethodDeclReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodDeclReturnType ::= Type 
            {
              MethodDeclReturnType RESULT = null;
		int methodReturnTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodReturnTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type methodReturnType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodWithReturn(methodReturnType); RESULT.setLine(methodReturnTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*MethodDeclReturnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodName ::= IDENT 
            {
              MethodName RESULT = null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*MethodName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodSignature ::= MethodDeclReturnType MethodName LEFT_ROUND_BRACKET MethodParameters RIGHT_ROUND_BRACKET 
            {
              MethodSignature RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MethodDeclReturnType M1 = (MethodDeclReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodName M2 = (MethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodParameters M3 = (MethodParameters)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodSignature(M1, M2, M3); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*MethodSignature*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodDecl ::= MethodSignature MethodVarDeclList LEFT_CURLY_BRACKET MethodStatements RIGHT_CURLY_BRACKET 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MethodSignature M1 = (MethodSignature)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodVarDeclList M2 = (MethodVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodStatements M3 = (MethodStatements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDecl(M1, M2, M3); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AbstractClassMethodTypesAllowed ::= AbstractMethodDecl 
            {
              AbstractClassMethodTypesAllowed RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AbstractMethodDecl A1 = (AbstractMethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractClassMethodTypesAbstractMethodType(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*AbstractClassMethodTypesAllowed*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AbstractClassMethodTypesAllowed ::= MethodDecl 
            {
              AbstractClassMethodTypesAllowed RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M1 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractClassMethodTypesMethodType(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(59/*AbstractClassMethodTypesAllowed*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AbstractClassMultipleMethodTypes ::= 
            {
              AbstractClassMultipleMethodTypes RESULT = null;
		 RESULT=new NoAbstractClassMultipleMethodTypes(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*AbstractClassMultipleMethodTypes*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AbstractClassMultipleMethodTypes ::= AbstractClassMultipleMethodTypes AbstractClassMethodTypesAllowed 
            {
              AbstractClassMultipleMethodTypes RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AbstractClassMultipleMethodTypes A1 = (AbstractClassMultipleMethodTypes)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AbstractClassMethodTypesAllowed A2 = (AbstractClassMethodTypesAllowed)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractClassMultipleMethodTypesClass(A1, A2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(58/*AbstractClassMultipleMethodTypes*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AbstractClassMethodList ::= 
            {
              AbstractClassMethodList RESULT = null;
		 RESULT=new NoAbstractClassMethodList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*AbstractClassMethodList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AbstractClassMethodList ::= LEFT_CURLY_BRACKET AbstractClassMultipleMethodTypes RIGHT_CURLY_BRACKET 
            {
              AbstractClassMethodList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AbstractClassMultipleMethodTypes A1 = (AbstractClassMultipleMethodTypes)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AbstractClassMethodListing(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(57/*AbstractClassMethodList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AbstractClassVarList ::= 
            {
              AbstractClassVarList RESULT = null;
		 RESULT=new NoAbstractClassVarList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*AbstractClassVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AbstractClassVarList ::= AbstractClassVarList VarDecl 
            {
              AbstractClassVarList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AbstractClassVarList A1 = (AbstractClassVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractClassVariableList(A1, V2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(56/*AbstractClassVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AbstractExtends ::= 
            {
              AbstractExtends RESULT = null;
		 RESULT=new NoAbstractExtends(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*AbstractExtends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AbstractExtends ::= EXTENDS Type 
            {
              AbstractExtends RESULT = null;
		int abstractExtendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int abstractExtendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type abstractExtendsType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractClassExtends(abstractExtendsType); RESULT.setLine(abstractExtendsTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(55/*AbstractExtends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AbstractClassName ::= IDENT 
            {
              AbstractClassName RESULT = null;
		int abstractClassIdentleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int abstractClassIdentright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String abstractClassIdent = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AbstractClassName(abstractClassIdent); RESULT.setLine(abstractClassIdentleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*AbstractClassName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AbstractClassDecl ::= ABSTRACT CLASS AbstractClassName AbstractExtends LEFT_CURLY_BRACKET AbstractClassVarList AbstractClassMethodList RIGHT_CURLY_BRACKET 
            {
              AbstractClassDecl RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		AbstractClassName A1 = (AbstractClassName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		AbstractExtends A2 = (AbstractExtends)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int A3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		AbstractClassVarList A3 = (AbstractClassVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AbstractClassMethodList A4 = (AbstractClassMethodList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AbstractClassDecl(A1, A2, A3, A4); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*AbstractClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassMethod ::= 
            {
              ClassMethod RESULT = null;
		 RESULT=new NoClassMethod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*ClassMethod*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassMethod ::= ClassMethod MethodDecl 
            {
              ClassMethod RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethod C1 = (ClassMethod)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassMethodd(C1, M2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(54/*ClassMethod*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassMethodList ::= 
            {
              ClassMethodList RESULT = null;
		 RESULT=new NoClassMethodList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*ClassMethodList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassMethodList ::= LEFT_CURLY_BRACKET ClassMethod RIGHT_CURLY_BRACKET 
            {
              ClassMethodList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethod C1 = (ClassMethod)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassMethodListt(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(53/*ClassMethodList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarList ::= 
            {
              ClassVarList RESULT = null;
		 RESULT=new NoClassVarList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*ClassVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarList ::= ClassVarList VarDecl 
            {
              ClassVarList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassVarList C1 = (ClassVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassVarListt(C1, V2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(52/*ClassVarList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDeclExtends ::= 
            {
              ClassDeclExtends RESULT = null;
		 RESULT=new NoClassExtends(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*ClassDeclExtends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDeclExtends ::= EXTENDS Type 
            {
              ClassDeclExtends RESULT = null;
		int classExtendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int classExtendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type classExtendsType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassDeclExtendsModifier(classExtendsType); RESULT.setLine(classExtendsTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(51/*ClassDeclExtends*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassName ::= IDENT 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassName(className); RESULT.setLine(classNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ClassName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= error ClassDeclExtends LEFT_CURLY_BRACKET ClassVarList ClassMethodList RIGHT_CURLY_BRACKET 
            {
              ClassDecl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ClassDeclExtends C1 = (ClassDeclExtends)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ClassVarList C2 = (ClassVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethodList C3 = (ClassMethodList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDeclarationErrorBeforeExtends(C1, C2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS ClassName error LEFT_CURLY_BRACKET ClassVarList ClassMethodList RIGHT_CURLY_BRACKET 
            {
              ClassDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ClassName C1 = (ClassName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ClassVarList C2 = (ClassVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethodList C3 = (ClassMethodList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDeclarationErrorInExtends(C1, C2, C3); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS ClassName ClassDeclExtends LEFT_CURLY_BRACKET ClassVarList ClassMethodList RIGHT_CURLY_BRACKET 
            {
              ClassDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ClassName C1 = (ClassName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ClassDeclExtends C2 = (ClassDeclExtends)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ClassVarList C3 = (ClassVarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethodList C4 = (ClassMethodList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDeclaration(C1, C2, C3, C4); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SingleVarArray ::= LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET 
            {
              SingleVarArray RESULT = null;
		 RESULT=new SingleVarArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*SingleVarArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SingleVarArray ::= 
            {
              SingleVarArray RESULT = null;
		 RESULT=new SingleVarNoArray(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*SingleVarArray*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SingleVarDeclaration ::= error 
            {
              SingleVarDeclaration RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Recovered from invalid variable declaration.", null);  RESULT=new SingleVarError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*SingleVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SingleVarDeclaration ::= IDENT SingleVarArray 
            {
              SingleVarDeclaration RESULT = null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleVarArray S1 = (SingleVarArray)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleVariableDeclaration(variableName, S1); RESULT.setLine(variableNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*SingleVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MultipleVarDeclaration ::= SingleVarDeclaration 
            {
              MultipleVarDeclaration RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleVarDeclaration S1 = (SingleVarDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleVarDecl(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*MultipleVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MultipleVarDeclaration ::= MultipleVarDeclaration COMMA SingleVarDeclaration 
            {
              MultipleVarDeclaration RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		MultipleVarDeclaration M1 = (MultipleVarDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleVarDeclaration S2 = (SingleVarDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleVariablesDeclaration(M1, S2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*MultipleVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= error DELIMITER 
            {
              VarDecl RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.report_error("Recovered from invalid variable declaration.", null);  RESULT=new VarDeclError(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= Type MultipleVarDeclaration DELIMITER 
            {
              VarDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MultipleVarDeclaration M1 = (MultipleVarDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclarationRoot(varType, M1); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstValue ::= BOOLEAN 
            {
              ConstValue RESULT = null;
		int constBoolValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constBoolValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean constBoolValue = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BooleanConst(constBoolValue); RESULT.setLine(constBoolValueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstValue ::= CHAR 
            {
              ConstValue RESULT = null;
		int constCharValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constCharValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character constCharValue = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharacterConst(constCharValue); RESULT.setLine(constCharValueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstValue ::= NUM_CONST 
            {
              ConstValue RESULT = null;
		int constNumValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int constNumValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer constNumValue = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumericalConst(constNumValue); RESULT.setLine(constNumValueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ConstValue*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SingleConstDeclaration ::= IDENT ASSINGMENT ConstValue 
            {
              SingleConstDeclaration RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstValue C1 = (ConstValue)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleConst(constName, C1); RESULT.setLine(constNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*SingleConstDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AdditionalConstDeclaration ::= 
            {
              AdditionalConstDeclaration RESULT = null;
		 RESULT=new NoAditionalConstDeclaration(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*AdditionalConstDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AdditionalConstDeclaration ::= AdditionalConstDeclaration COMMA SingleConstDeclaration 
            {
              AdditionalConstDeclaration RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		AdditionalConstDeclaration A1 = (AdditionalConstDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleConstDeclaration S2 = (SingleConstDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AdditionalConstantDeclaration(A1, S2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*AdditionalConstDeclaration*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type SingleConstDeclaration AdditionalConstDeclaration DELIMITER 
            {
              ConstDecl RESULT = null;
		int constTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int constTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type constType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		SingleConstDeclaration S1 = (SingleConstDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		AdditionalConstDeclaration A2 = (AdditionalConstDeclaration)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDecl(constType, S1, A2); RESULT.setLine(constTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ProgramMethodsDeclList ::= 
            {
              ProgramMethodsDeclList RESULT = null;
		 RESULT=new NoProgramMethodList(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*ProgramMethodsDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ProgramMethodsDeclList ::= ProgramMethodsDeclList MethodDecl 
            {
              ProgramMethodsDeclList RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramMethodsDeclList P1 = (ProgramMethodsDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramMethodDeclList(P1, M2); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*ProgramMethodsDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ProgramElementsDeclListElement ::= ClassDecl 
            {
              ProgramElementsDeclListElement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl C1 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleProgramClass(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*ProgramElementsDeclListElement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElementsDeclListElement ::= AbstractClassDecl 
            {
              ProgramElementsDeclListElement RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AbstractClassDecl A1 = (AbstractClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleProgramAbstractClass(A1); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*ProgramElementsDeclListElement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramElementsDeclListElement ::= VarDecl 
            {
              ProgramElementsDeclListElement RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleProgramVar(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*ProgramElementsDeclListElement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramElementsDeclListElement ::= ConstDecl 
            {
              ProgramElementsDeclListElement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SingleProgramConst(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*ProgramElementsDeclListElement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramElementsDeclList ::= 
            {
              ProgramElementsDeclList RESULT = null;
		 RESULT=new NoProgramElements(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*ProgramElementsDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramElementsDeclList ::= ProgramElementsDeclList ProgramElementsDeclListElement 
            {
              ProgramElementsDeclList RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramElementsDeclList P1 = (ProgramElementsDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ProgramElementsDeclListElement P2 = (ProgramElementsDeclListElement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramElementsDeclarationList(P1, P2); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*ProgramElementsDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              ProgramName RESULT = null;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*ProgramName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgramName ProgramElementsDeclList LEFT_CURLY_BRACKET ProgramMethodsDeclList RIGHT_CURLY_BRACKET 
            {
              Program RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgramName P1 = (ProgramName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ProgramElementsDeclList P2 = (ProgramElementsDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int P3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int P3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramMethodsDeclList P3 = (ProgramMethodsDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(P1, P2, P3); RESULT.setLine(P1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

