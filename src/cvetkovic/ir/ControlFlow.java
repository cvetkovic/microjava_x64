package cvetkovic.ir;

import cvetkovic.ir.quadruple.Quadruple;
import cvetkovic.ir.quadruple.QuadrupleLabel;

import java.util.ArrayList;
import java.util.List;

public class ControlFlow {
    private static int uniqueID = 0;

    public static String generateUniqueLabelName() {
        return "L" + uniqueID++;
    }

    public static int autoGeneratedLabel = 0;

    public static String generateLabel(List<Quadruple> code) {
        String labelName = "CGL_" + autoGeneratedLabel++;
        // compiler generated label
        return generateLabel(code, labelName);
    }

    public static String generateLabel(List<Quadruple> code, String name) {
        Quadruple label = new Quadruple(IRInstruction.GEN_LABEL);
        label.setArg1(new QuadrupleLabel(name));
        code.add(label);

        return name;
    }

    public static class IfFixPoint {
        public Quadruple quadruple;
        public int statementDepth;

        public IfFixPoint(Quadruple quadruple, int statementDepth) {
            this.quadruple = quadruple;
            this.statementDepth = statementDepth;
            this.fixType = FixType.CODE_INSERTED;
        }

        public FixType fixType;

        public IfFixPoint(Quadruple quadruple, int statementDepth, FixType fixType) {
            this.quadruple = quadruple;
            this.statementDepth = statementDepth;
            this.fixType = fixType;
        }

        public enum FixType {
            CODE_INSERTED,
            COMPILER_ADDED
        }
    }

    public static class ForStatementFixPoint {
        public String conditionLabel;
        public String updateVarLabel;

        public List<Quadruple> forEndFixPoint = new ArrayList<>();
        public List<Quadruple> unconditionalJumpForOrCondition = new ArrayList<>();

        public List<Quadruple> breakStatements = new ArrayList<>();
    }
}
